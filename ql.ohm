ql {
	Expression = ExpressionComma
	ExpressionComma =
		identifier "=" ExpressionFilter "," ExpressionComma	-- comma
		| ExpressionFilter
	ExpressionFilter =
		ExpressionFilter "|" ExpressionOr	-- filter
		| ExpressionOr
	ExpressionOr =
		ExpressionOr "||" ExpressionAnd	-- or
		| ExpressionAnd
	ExpressionAnd =
		ExpressionAnd "&&" ExpressionNot	-- and
		| ExpressionNot
	ExpressionNot =
		"!" ExpressionNot	-- not
		| ExpressionCompare
	ExpressionCompare =
		ExpressionCompare ("<="|"="|">="|"<"|"!="|">") ExpressionAdd	-- compare
		| ExpressionAdd
	ExpressionAdd =
		ExpressionAdd ("+"|"-") ExpressionMember	-- add
		| ExpressionMember
	ExpressionMember =
		ExpressionMember "." identifier	-- property
		| ExpressionMember "#" ExpressionAtom	-- index
		| ExpressionAtom
	ExpressionAtom =
		"(" Expression ")"	-- parentheses
		| ExpressionName
		| number
		| string
	ExpressionName = "::"? identifier
	identifier = &letter alnum+
	number = digit+
	string = "\"" (~"\"" any)* "\""
}