ql {
	Expression = ExpressionComma
	ExpressionComma =
		identifier "=" ExpressionFilter "," ExpressionComma	-- comma
		| ExpressionFilter
	ExpressionFilter =
		ExpressionFilter "where" ExpressionOr	-- filter
		| ExpressionOr
	ExpressionOr =
		ExpressionOr "|" ExpressionAnd	-- or
		| ExpressionAnd
	ExpressionAnd =
		ExpressionAnd "&" ExpressionNot	-- and
		| ExpressionNot
	ExpressionNot =
		"!" ExpressionNot	-- not
		| ExpressionCompare
	ExpressionCompare =
		ExpressionCompare ("<="|"="|">="|"<"|"!="|">") ExpressionAdd	-- compare
		| ExpressionAdd
	ExpressionAdd =
		ExpressionAdd ("+"|"-") ExpressionMultiply	-- add
		| ExpressionMultiply
	ExpressionMultiply =
		ExpressionMultiply ("*"|"/") ExpressionAddUnary	-- multiply
		| ExpressionAddUnary
	ExpressionAddUnary =
		("+"|"-") ExpressionAddUnary	-- add
		| ExpressionCount
	ExpressionCount =
		ExpressionCount "#"	-- count
		| ExpressionCall
	ExpressionCall =
		ExpressionMember ExpressionCall	-- call
		| ExpressionMember
	ExpressionMember =
		ExpressionMember "." identifier	-- property
		| ExpressionMember "#" ExpressionAtom	-- index
		| ExpressionAtom
	ExpressionAtom =
		"(" Expression ")"	-- parentheses
		| ExpressionThis
		| ExpressionName
		| number
		| string
	ExpressionThis = "this" identifier
	ExpressionName = "::"? identifier
	identifier = ~"where" &(letter|"_") (alnum|"_")+
	number = digit+
	string = "\"" (~"\"" any)* "\""
	Declarations = Declaration*
	Declaration = identifier "{" DeclarationStatement* "}"
	DeclarationStatement = DeclarationProperty | DeclarationId
	DeclarationProperty = DeclarationPropertyType | DeclarationPropertyValue
	DeclarationPropertyType = identifier ":" identifier ";"
	DeclarationPropertyValue = identifier "=" Expression ";"
	DeclarationId = "id" identifier ";"
}